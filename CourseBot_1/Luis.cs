// <auto-generated>
// Code generated by LUISGen Luis.json -cs Bg.Luis -o 
// Tool github: https://github.com/microsoft/botbuilder-tools
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
using Newtonsoft.Json;
using System.Collections.Generic;
using Microsoft.Bot.Builder;
using Microsoft.Bot.Builder.AI.Luis;
namespace Bg
{
    public partial class Luis: IRecognizerConvert
    {
        [JsonProperty("text")]
        public string Text;

        [JsonProperty("alteredText")]
        public string AlteredText;

        public enum Intent {
            Greeting, 
            Name, 
            None, 
            QueryBudget, 
            QueryDev, 
            QueryDuration, 
            QueryEmail, 
            QueryOrg, 
            QueryStage, 
            QueryStageFinal, 
            QueryStageMid, 
            QueryWeb
        };
        [JsonProperty("intents")]
        public Dictionary<Intent, IntentScore> Intents;

        public class _Entities
        {
            // Simple entities
            public string[] Begin;

            public string[] DevType;

            public string[] Duration;

            public string[] Final;
            public string[] ending;
            public string[] final_stage;
            public string[] improve_product;
            public string[] improve_project;

            public string[] MediumStage;

            public string[] OrganizationType;
            public string[] sme;
            public string[] startup;

            // Built-in entities
            public string[] email;

            public Money[] money;
            public Money[] 30k;

            public string[] personName;

            public string[] url;

            // Instance
            public class _Instance
            {
                public InstanceData[] Begin;
                public InstanceData[] DevType;
                public InstanceData[] Duration;
                public InstanceData[] Final;
                public InstanceData[] ending;
                public InstanceData[] final_stage;
                public InstanceData[] improve_product;
                public InstanceData[] improve_project;
                public InstanceData[] MediumStage;
                public InstanceData[] OrganizationType;
                public InstanceData[] sme;
                public InstanceData[] startup;
                public InstanceData[] email;
                public InstanceData[] money;
                public InstanceData[] 30k;
                public InstanceData[] personName;
                public InstanceData[] url;
            }
            [JsonProperty("$instance")]
            public _Instance _instance;
        }
        [JsonProperty("entities")]
        public _Entities Entities;

        [JsonExtensionData(ReadData = true, WriteData = true)]
        public IDictionary<string, object> Properties {get; set; }

        public void Convert(dynamic result)
        {
            var app = JsonConvert.DeserializeObject<Luis>(JsonConvert.SerializeObject(result, new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore }));
            Text = app.Text;
            AlteredText = app.AlteredText;
            Intents = app.Intents;
            Entities = app.Entities;
            Properties = app.Properties;
        }

        public (Intent intent, double score) TopIntent()
        {
            Intent maxIntent = Intent.None;
            var max = 0.0;
            foreach (var entry in Intents)
            {
                if (entry.Value.Score > max)
                {
                    maxIntent = entry.Key;
                    max = entry.Value.Score.Value;
                }
            }
            return (maxIntent, max);
        }
    }
}
